/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.algorithmics.sablecc.node;

import com.algorithmics.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ANotsentenceSentence extends PSentence
{
    private PSentence _sentence_;

    public ANotsentenceSentence()
    {
        // Constructor
    }

    public ANotsentenceSentence(
        @SuppressWarnings("hiding") PSentence _sentence_)
    {
        // Constructor
        setSentence(_sentence_);

    }

    @Override
    public Object clone()
    {
        return new ANotsentenceSentence(
            cloneNode(this._sentence_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotsentenceSentence(this);
    }

    public PSentence getSentence()
    {
        return this._sentence_;
    }

    public void setSentence(PSentence node)
    {
        if(this._sentence_ != null)
        {
            this._sentence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sentence_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sentence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sentence_ == child)
        {
            this._sentence_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sentence_ == oldChild)
        {
            setSentence((PSentence) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
