/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.algorithmics.sablecc.parser;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import com.algorithmics.sablecc.analysis.Analysis;
import com.algorithmics.sablecc.analysis.AnalysisAdapter;
import com.algorithmics.sablecc.lexer.Lexer;
import com.algorithmics.sablecc.lexer.LexerException;
import com.algorithmics.sablecc.node.AAndSentence;
import com.algorithmics.sablecc.node.ANotsentenceSentence;
import com.algorithmics.sablecc.node.ANotvarSentence;
import com.algorithmics.sablecc.node.AOrSentence;
import com.algorithmics.sablecc.node.AVarSentence;
import com.algorithmics.sablecc.node.EOF;
import com.algorithmics.sablecc.node.Node;
import com.algorithmics.sablecc.node.PSentence;
import com.algorithmics.sablecc.node.Start;
import com.algorithmics.sablecc.node.Switchable;
import com.algorithmics.sablecc.node.TVar;
import com.algorithmics.sablecc.node.Token;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PSentence node1 = (PSentence) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AOrSentenceSentence */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ANotOrSentenceSentence */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAndSentenceTerm */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ANotAndSentenceTerm */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ANotVarFactor */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ABracketedSentenceFactor */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ANotBracketedSentenceFactor */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AOrSentenceSentence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        {
            // Block
        PSentence psentenceNode2;
        PSentence psentenceNode3;
        psentenceNode2 = (PSentence)nodeArrayList1.get(0);
        psentenceNode3 = (PSentence)nodeArrayList3.get(0);

        psentenceNode1 = new AOrSentence(psentenceNode2, psentenceNode3);
        }
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANotOrSentenceSentence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        psentenceNode1 = (PSentence)nodeArrayList1.get(0);
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAndSentenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        {
            // Block
        PSentence psentenceNode2;
        PSentence psentenceNode3;
        psentenceNode2 = (PSentence)nodeArrayList1.get(0);
        psentenceNode3 = (PSentence)nodeArrayList3.get(0);

        psentenceNode1 = new AAndSentence(psentenceNode2, psentenceNode3);
        }
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ANotAndSentenceTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        psentenceNode1 = (PSentence)nodeArrayList1.get(0);
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        {
            // Block
        TVar tvarNode2;
        tvarNode2 = (TVar)nodeArrayList1.get(0);

        psentenceNode1 = new AVarSentence(tvarNode2);
        }
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANotVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        {
            // Block
        TVar tvarNode2;
        tvarNode2 = (TVar)nodeArrayList2.get(0);

        psentenceNode1 = new ANotvarSentence(tvarNode2);
        }
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ABracketedSentenceFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        psentenceNode1 = (PSentence)nodeArrayList2.get(0);
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANotBracketedSentenceFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSentence psentenceNode1;
        {
            // Block
        PSentence psentenceNode2;
        psentenceNode2 = (PSentence)nodeArrayList3.get(0);

        psentenceNode1 = new ANotsentenceSentence(psentenceNode2);
        }
	nodeList.add(psentenceNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 2}, {0, SHIFT, 8}, {5, SHIFT, 9}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 4}, {3, SHIFT, 10}, {6, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 7}, {1, SHIFT, 12}, {3, SHIFT, 10}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 10}, {0, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 11}, {0, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 13}, {1, SHIFT, 16}, {3, SHIFT, 10}, },
			{{-1, REDUCE, 0}, {2, SHIFT, 11}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 7}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, {1, 7}, {8, 13}, },
			{{-1, 5}, {10, 14}, },
			{{-1, 6}, {11, 15}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', not, var",
			"expecting: '(', var",
			"expecting: ')', and, or, EOF",
			"expecting: or, EOF",
			"expecting: ')', or",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 2, 3, 2, 2, 4, 0, 2, 0, 0, 2, 4, 2, 2, 2, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
